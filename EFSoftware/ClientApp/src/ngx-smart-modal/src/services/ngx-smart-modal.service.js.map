{"version":3,"file":"ngx-smart-modal.service.js","sourceRoot":"","sources":["ngx-smart-modal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NgxSmartModalComponent } from '../..';\r\nimport { ModalInstance } from './modal-instance';\r\n\r\n@Injectable()\r\nexport class NgxSmartModalService {\r\n  public modalStack: ModalInstance[] = [];\r\n\r\n  /**\r\n   * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\r\n   * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\r\n   *\r\n   * @param modalInstance The object that contains the given modal identifier and the modal itself.\r\n   * @param force Optional parameter that forces the overriding of modal instance if it already exists.\r\n   * @returns nothing special.\r\n   */\r\n  public addModal(modalInstance: ModalInstance, force?: boolean): void {\r\n    if (force) {\r\n      const i: number = this.modalStack.findIndex((o: ModalInstance) => o.id === modalInstance.id);\r\n      if (i > -1) {\r\n        this.modalStack[i].modal = modalInstance.modal;\r\n      } else {\r\n        this.modalStack.push(modalInstance);\r\n      }\r\n      return;\r\n    }\r\n    this.modalStack.push(modalInstance);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a modal instance by its identifier.\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   */\r\n  public getModal(id: string): NgxSmartModalComponent {\r\n    const i = this.modalStack.find((o: ModalInstance) => o.id === id);\r\n\r\n    if (i !== undefined) {\r\n      return i.modal;\r\n    } else {\r\n      throw new Error(`Cannot find modal with identifier ${id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Alias of `getModal` to retrieve a modal instance by its identifier.\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   */\r\n  public get(id: string): NgxSmartModalComponent {\r\n    return this.getModal(id);\r\n  }\r\n\r\n  /**\r\n   * Open a given modal\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   * @param force Tell the modal to open top of all other opened modals\r\n   */\r\n  public open(id: string, force = false): void {\r\n    let i;\r\n    if (i = this.get(id)) {\r\n      i.open(force);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close a given modal\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   */\r\n  public close(id: string): void {\r\n    let i;\r\n    if (i = this.get(id)) {\r\n      i.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles a given modal\r\n   * If the retrieved modal is opened it closes it, else it opens it.\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   * @param force Tell the modal to open top of all other opened modals\r\n   */\r\n  public toggle(id: string, force = false): void {\r\n    let i;\r\n    if (i = this.get(id)) {\r\n      i.toggle(force);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve all the created modals.\r\n   *\r\n   * @returns an array that contains all modal instances.\r\n   */\r\n  public getModalStack(): ModalInstance[] {\r\n    return this.modalStack;\r\n  }\r\n\r\n  /**\r\n   * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\r\n   *\r\n   * @returns an array that contains all the opened modals.\r\n   */\r\n  public getOpenedModals(): ModalInstance[] {\r\n    return this.modalStack.filter((o: ModalInstance) => o.modal.visible);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the opened modal with highest z-index.\r\n   *\r\n   * @returns the opened modal with highest z-index.\r\n   */\r\n  public getTopOpenedModal(): NgxSmartModalComponent {\r\n    if (!this.getOpenedModals().length) {\r\n      throw new Error('No modal is opened');\r\n    }\r\n\r\n    return this.getOpenedModals()\r\n      .map((o: ModalInstance) => o.modal)\r\n      .reduce((highest, item) => item.layerPosition > highest.layerPosition ? item : highest, this.getOpenedModals()[0].modal);\r\n  }\r\n\r\n  /**\r\n   * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\r\n   * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\r\n   * Use it to make a modal appear foreground.\r\n   *\r\n   * @returns a higher index from all the existing modal instances.\r\n   */\r\n  public getHigherIndex(): number {\r\n    return Math.max(...this.modalStack.map((o) => o.modal.layerPosition), 1041) + 1;\r\n  }\r\n\r\n  /**\r\n   * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\r\n   *\r\n   * @returns the number of modal instances.\r\n   */\r\n  public getModalStackCount(): number {\r\n    return this.modalStack.length;\r\n  }\r\n\r\n  /**\r\n   * Remove a modal instance from the modal stack.\r\n   *\r\n   * @param id The modal identifier.\r\n   * @returns the removed modal instance.\r\n   */\r\n  public removeModal(id: string): void {\r\n    const i: number = this.modalStack.findIndex((o: any) => o.id === id);\r\n    if (i > -1) {\r\n      this.modalStack.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\r\n   * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\r\n   * them with the new ones. Finally if no modal found it returns an error message in the console and false value\r\n   * as method output.\r\n   *\r\n   * @param data The data you want to associate to the modal.\r\n   * @param id The modal identifier.\r\n   * @param force If true, overrides the previous stored data if there was.\r\n   * @returns true if the given modal exists and the process has been tried, either false.\r\n   */\r\n  public setModalData(data: any, id: string, force?: boolean): boolean {\r\n    let i;\r\n    if (i = this.get(id)) {\r\n      i.setData(data, force);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve modal data by its identifier.\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   * @returns the associated modal data.\r\n   */\r\n  public getModalData(id: string): any {\r\n    let i;\r\n    if (i = this.get(id)) {\r\n      return i.getData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the data attached to a given modal.\r\n   *\r\n   * @param id The modal identifier used at creation time.\r\n   * @returns the removed data or false if modal doesn't exist.\r\n   */\r\n  public resetModalData(id: string): any | boolean {\r\n    if (!!this.modalStack.find((o: ModalInstance) => o.id === id)) {\r\n      const removed: any = this.getModal(id).getData();\r\n      this.getModal(id).removeData();\r\n      return removed;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close the latest opened modal if it has been declared as escapable\r\n   * Using a debounce system because one or more modals could be listening\r\n   * escape key press event.\r\n   */\r\n  public closeLatestModal(): void {\r\n    this.getTopOpenedModal().close();\r\n  }\r\n}\r\n"]}